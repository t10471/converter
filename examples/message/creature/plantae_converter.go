// Code generated by "encoder -type=Plantae"; DO NOT EDIT.
package creature

// GENERATED BY YO. DO NOT EDIT.

import (
	"bytes"
	"encoding/binary"

	"github.com/t10471/converter/predefine"
)

type PlantaeConverter struct {
	InfoConverter
	Number     [2]byte  `label:"番号"`
	ExtendArea [10]byte `label:"拡張エリア"`
}

func (cv *PlantaeConverter) MarshalBuffer() (*bytes.Buffer, error) {
	buffer := new(bytes.Buffer)
	if err := binary.Write(buffer, binary.BigEndian, cv); err != nil {
		return nil, err
	}
	return buffer, nil
}
func (cv *PlantaeConverter) UnmarshalBuffer(buffer *bytes.Buffer) error {
	if err := binary.Read(buffer, binary.BigEndian, cv); err != nil {
		return err
	}
	return nil
}
func (cv *PlantaeConverter) ConvertFrom(original Plantae) error {
	var err error
	err = cv.InfoConverter.ConvertFrom(original.Info)
	if err != nil {
		return err
	}
	cv.Number = encodePlantaeHex2(original.Number)
	cv.ExtendArea = encodePlantaeBlank10(original.ExtendArea)
	return nil
}
func (cv *PlantaeConverter) ToOriginal() (Plantae, error) {
	var err error
	original := Plantae{}

	original.Info, err = cv.InfoConverter.ToOriginal()
	if err != nil {
		return Plantae{}, err
	}
	original.Number = decodePlantaeHex2(cv.Number)
	original.ExtendArea = decodePlantaeBlank10(cv.ExtendArea)
	return original, nil
}
func encodePlantaeHex2(h predefine.Hex) [2]byte {
	v := predefine.Uint2bytes(uint64(h), 2)
	r := [2]byte{}
	copy(r[:], v)
	return r
}
func decodePlantaeHex2(b [2]byte) predefine.Hex {
	return predefine.Hex(predefine.Bytes2uint(b[:]))
}
func encodePlantaeBlank10(b predefine.Blank) [10]byte {
	r := [10]byte{}
	copy(r[:], bytes.Repeat([]byte{byte(0)}, int(b)))
	return r
}
func decodePlantaeBlank10(b [10]byte) predefine.Blank {
	return predefine.Blank(len(b))
}
