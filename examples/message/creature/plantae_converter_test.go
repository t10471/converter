// Code generated by "encoder -type=Plantae"; DO NOT EDIT.
package creature

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/t10471/converter/predefine"
)

func TestPlantaeConverter_MarshalBuffer(t *testing.T) {
	type fields struct {
		InfoConverter InfoConverter
		Number        [2]byte
		ExtendArea    [10]byte
	}
	tests := []struct {
		name    string
		fields  fields
		want    *bytes.Buffer
		wantErr bool
	}{
		{
			"OK",
			fields{InfoConverter{[1]byte{0x01}, [1]byte{0x00}},
				[2]byte{0x0, 0x01},
				func() (r [10]byte) {
					copy(r[:], bytes.Repeat([]byte{byte(0)}, 10))
					return
				}(),
			},
			func() *bytes.Buffer {
				buffer := new(bytes.Buffer)
				buffer.Write([]byte{0x01, 0x00})
				buffer.Write([]byte{0x00, 0x01})
				buffer.Write(bytes.Repeat([]byte{byte(0)}, 10))
				return buffer
			}(),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cv := &PlantaeConverter{
				InfoConverter: tt.fields.InfoConverter,
				Number:        tt.fields.Number,
				ExtendArea:    tt.fields.ExtendArea,
			}
			got, err := cv.MarshalBuffer()
			if (err != nil) != tt.wantErr {
				t.Errorf("PlantaeConverter.MarshalBuffer() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("PlantaeConverter.MarshalBuffer() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestPlantaeConverter_UnmarshalBuffer(t *testing.T) {
	type fields struct {
		InfoConverter InfoConverter
		Number        [2]byte
		ExtendArea    [10]byte
	}
	type args struct {
		buffer *bytes.Buffer
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			"OK",
			fields{InfoConverter{[1]byte{0x01}, [1]byte{0x00}},
				[2]byte{0x0, 0x01},
				func() (r [10]byte) {
					copy(r[:], bytes.Repeat([]byte{byte(0)}, 10))
					return
				}(),
			},
			func() args {
				buffer := new(bytes.Buffer)
				buffer.Write([]byte{0x01, 0x00})
				buffer.Write([]byte{0x00, 0x01})
				buffer.Write(bytes.Repeat([]byte{byte(0)}, 10))
				return args{buffer}
			}(),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cv := &PlantaeConverter{
				InfoConverter: tt.fields.InfoConverter,
				Number:        tt.fields.Number,
				ExtendArea:    tt.fields.ExtendArea,
			}
			if err := cv.UnmarshalBuffer(tt.args.buffer); (err != nil) != tt.wantErr {
				t.Errorf("PlantaeConverter.UnmarshalBuffer() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestPlantaeConverter_ConvertFrom(t *testing.T) {
	type fields struct {
		InfoConverter InfoConverter
		Number        [2]byte
		ExtendArea    [10]byte
	}
	type args struct {
		original Plantae
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			"OK",
			fields{InfoConverter{[1]byte{0x01}, [1]byte{0x00}},
				[2]byte{0x0, 0x01},
				func() (r [10]byte) {
					copy(r[:], bytes.Repeat([]byte{byte(0)}, 10))
					return
				}(),
			},
			args{Plantae{
				Info{TypePlantae, DetailPlantaeRubiales},
				1,
				10}},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cv := &PlantaeConverter{
				InfoConverter: tt.fields.InfoConverter,
				Number:        tt.fields.Number,
				ExtendArea:    tt.fields.ExtendArea,
			}
			if err := cv.ConvertFrom(tt.args.original); (err != nil) != tt.wantErr {
				t.Errorf("PlantaeConverter.ConvertFrom() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestPlantaeConverter_ToOriginal(t *testing.T) {
	type fields struct {
		InfoConverter InfoConverter
		Number        [2]byte
		ExtendArea    [10]byte
	}
	tests := []struct {
		name    string
		fields  fields
		want    Plantae
		wantErr bool
	}{
		{
			"OK",
			fields{InfoConverter{[1]byte{0x01}, [1]byte{0x00}},
				[2]byte{0x0, 0x01},
				func() (r [10]byte) {
					copy(r[:], bytes.Repeat([]byte{byte(0)}, 10))
					return
				}(),
			},
			Plantae{
				Info{TypePlantae, DetailPlantaeRubiales},
				1,
				10},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cv := &PlantaeConverter{
				InfoConverter: tt.fields.InfoConverter,
				Number:        tt.fields.Number,
				ExtendArea:    tt.fields.ExtendArea,
			}
			got, err := cv.ToOriginal()
			if (err != nil) != tt.wantErr {
				t.Errorf("PlantaeConverter.ToOriginal() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("PlantaeConverter.ToOriginal() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_encodePlantaeHex2(t *testing.T) {
	type args struct {
		h predefine.Hex
	}
	tests := []struct {
		name string
		args args
		want [2]byte
	}{
		{
			"OK",
			args{predefine.Hex(10)},
			[2]byte{0x00, 0x0a},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := encodePlantaeHex2(tt.args.h); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("encodePlantaeHex2() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_decodePlantaeHex2(t *testing.T) {
	type args struct {
		b [2]byte
	}
	tests := []struct {
		name string
		args args
		want predefine.Hex
	}{
		{
			"OK",
			args{[2]byte{0x00, 0x0a}},
			predefine.Hex(10),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := decodePlantaeHex2(tt.args.b); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodePlantaeHex2() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_encodePlantaeBlank10(t *testing.T) {
	type args struct {
		b predefine.Blank
	}
	tests := []struct {
		name string
		args args
		want [10]byte
	}{
		{
			"OK",
			args{predefine.Blank(10)},
			[10]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := encodePlantaeBlank10(tt.args.b); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("encodePlantaeBlank10() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_decodePlantaeBlank10(t *testing.T) {
	type args struct {
		b [10]byte
	}
	tests := []struct {
		name string
		args args
		want predefine.Blank
	}{
		{
			"OK",
			args{[10]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
			predefine.Blank(10),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := decodePlantaeBlank10(tt.args.b); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodePlantaeBlank10() = %v, want %v", got, tt.want)
			}
		})
	}
}
